/*
  (local-set-key (kbd "s-r") (lambda () (interactive) (save-buffer) (process-send-string "*shell*" "echo '\n'; webppl omniglot.wppl --require underscore --require b-spline\n")))

    */

var _ = underscore;

var pam = function(a, f) {
  return map(f, a);
}

var sampleType = function() {

  var numStrokes = 3;/*categorical([4.2, 4.1, 3, 1.5, 0.5, 0.25, 0.125, 0.0625, 0.0525, 0.03],
                               [1,   2,   3, 4,   5,   6,    7,     8,      9,      10]
                              );*/

  var sampleNumSubStrokes = function(n) {
    if (n == 1) {
      return binomial({n: 9, p: 0.15}) + 1 // HT mathematica
    } else {
      return categorical([0.5, 0.2, 0.15, 0.08, 0.04, 0.02, 0.01, 0.005, 0.0025, 0.00125],
                         [1,   2,   3,    4,    5,    6,    7,    8,     9,      10]
                        )
    }
  }

  var sampleRelationDetails = function(type, prevStrokes) {
    if (type == 'independent') {
      // todo: this isn't quite what lake does (he has some variable J that depends on the stroke index) but this is not clear to me
      return {x: uniform(0,1),
              y: uniform(0,1)
             }
    } else if (type == 'start' || type == 'end') {
      var prevStrokeIndex = randomInteger(prevStrokes.length);
      return {prevStrokeIndex: prevStrokeIndex}
    } else { // type == 'along
      var prevStrokeIndex = randomInteger(prevStrokes.length),
          prevStroke = prevStrokes[prevStrokeIndex];
      var prevSubStrokeIndex = randomInteger(prevStroke.subStrokes.length);
      var splineCoordinate = uniform(0,1);

      return {prevStrokeIndex: prevStrokeIndex,
              prevSubStrokeIndex: prevSubStrokeIndex,
              splineCoordinate: splineCoordinate
      }
    }
  }

  // for each stroke, sample relation to previous strokes and substrokes
  var helper = function(i, strokesSoFar) {
    if (i == numStrokes) {
      return strokesSoFar
    } else {
      var numSubStrokes = sampleNumSubStrokes(numStrokes);
      var subStrokes = sampleStroke(i, numSubStrokes);
      var relationType = i == 0 ? 'independent' : 'along';// uniformDraw(['independent','start','end','along']);
      var relationDetails = sampleRelationDetails(relationType, strokesSoFar);
      var relation = _.extend({type: relationType}, relationDetails);

      return helper(i + 1,
                    strokesSoFar.concat({subStrokes: subStrokes,
                                         relation: relation})
                   )
    }
  }

  var params = helper(0, []);

  return params;
  //return function() { sampleToken(params) }
}

var allPrimitiveIds = ['v', 'h'];

// todo: get real data (although the most likely primitives are straight lines anyway, see bottom right of fig s2)
// todo: use MultivariateGaussian
var primitiveMeans = {
  v: [{x: 0.5, y: 0.7},
      {x: 0.5, y: 0.6},
      {x: 0.5, y: 0.5},
      {x: 0.5, y: 0.4},
      {x: 0.5, y: 0.3}
     ],
  h: [{y: 0.5, x: 0.3},
      {y: 0.5, x: 0.4},
      {y: 0.5, x: 0.5},
      {y: 0.5, x: 0.6},
      {y: 0.5, x: 0.7}
     ],
  c: [{x: 0.3, y: 0.7,
       x: 0.4, y: 0.6,
       x: 0.5, y: 0.5,
       x: 0.4, y: 0.4,
       x: 0.3, y: 0.3}]
};

var primitiveSds = {
  v: [{x: 0.01, y: 0.01},
      {x: 0.01, y: 0.01},
      {x: 0.01, y: 0.01},
      {x: 0.01, y: 0.01},
      {x: 0.01, y: 0.01}
     ],
  h: [{x: 0.01, y: 0.01},
      {x: 0.01, y: 0.01},
      {x: 0.01, y: 0.01},
      {x: 0.01, y: 0.01},
      {x: 0.01, y: 0.01}
     ],
  c: [{x: 0.01, y: 0.01},
      {x: 0.01, y: 0.01},
      {x: 0.01, y: 0.01},
      {x: 0.01, y: 0.01},
      {x: 0.01, y: 0.01}
     ]

}

var sampleControlPoints = function(primitiveId) {
  var means = primitiveMeans[primitiveId],
      sds = primitiveSds[primitiveId];

  return map2(
    function(m,s) {
      return {x: gaussian(m.x,s.x), y: gaussian(m.y,s.y)}
    },
    means,
    sds);
};

// todo: primitive scale is indexed by stroke index and substroke index
var sampleScale = function(primitiveId) {
  var a = 2, b = 2;
  var shape = a, scale = 1/b;
  return gamma(shape, scale);
}

// a stroke is an array of substrokes
var sampleStroke = function(i, numSubStrokes) {
  var samplePrimitiveIds = function(idsSoFar /* initialized with 1 element */) {
    if (idsSoFar.length == numSubStrokes) {
      return idsSoFar
    } else {
      var newId = uniformDraw(allPrimitiveIds);
      // todo: declare markov dependencies outside of this function
      //var newId = _.last(idsSoFar) == 'h' ? 'v' : 'h';
      return samplePrimitiveIds(idsSoFar.concat(newId))
    }
  }
  var primitiveIds = samplePrimitiveIds([uniformDraw(allPrimitiveIds)]);

  // for each substroke, sample control points and scale
  var strokes = pam(primitiveIds,
                    function(id) {
                      return {controlPoints: sampleControlPoints(id),
                              scale: sampleScale(id)}
                    });


  return strokes;
}


var sampleToken = function(params) {
  var strokes = params.strokes,
      numStrokes = strokes.length,
      relations = params.relations;

  var helper = function(i, trajectoriesSoFar) {

    if (trajectoriesSoFar.length == numStrokes) {
      return trajectoriesSoFar
    }

    if (relations[i].type == 'along') {
      // perturb attachment along the spline
      var tau = todo(); // "type-level spline coordinate t_i \in R" (todo: shouldn't tau be in the unit interval?)
    }

    // sample starting location

    // perturb control points

    // compose trajectory
    return helper(i+1, trajectoriesSoFar.concat(trajectory))
  }

  // sample global image transformation

  // sample amount of pixel noise

  // sample amount of blur

  // render
}

var makeTrajectory = function(x, _startX, _startY) {
  var subStrokes = x.subStrokes,
      relation = x.relation;

  // todo: perturb scale and control points

  // todo: do my splines match brenden's?
  // (e.g., should i be clamping spline to the beginning and end control points?)
  var makeSplines = function(i, splinesSoFar, startX, startY) {
    if (i == subStrokes.length) {
      return splinesSoFar
    } else {

      var controlPoints = subStrokes[i].controlPoints,
          scale = subStrokes[i].scale;

      // scale control points and convert to flattened format
      var controlPointsScaled = pam(subStrokes[i].controlPoints,
                                       function(d) {
                                         return [scale * d.x, scale * d.y]
                                       });

      var abstractSplinePoints = pam(_.range(0,1 + 0.1,0.1),
                                     function(t) { return
                                                   bSpline.call(null,
                                                                t,
                                                                3,
                                                                controlPointsScaled) });

      // offsetX is such that abstractSplinePoints[0][0] + offsetX = startX
      // so offsetX = startX - abstractSplinePoints[0][0]

      var offsetX = startX - abstractSplinePoints[0][0],
          offsetY = startY - abstractSplinePoints[0][1];

      var splinePoints = pam(abstractSplinePoints,
                                     function(pt) {
                                       return [pt[0] + offsetX, pt[1] + offsetY]
                                     }
                                    )

      return makeSplines(i+1,
                         splinesSoFar.concat([splinePoints]),
                         _.last(splinePoints)[0],
                         _.last(splinePoints)[1]
                        )
    }
  }

  return makeSplines(0, [], _startX, _startY);

}

var strokeToDf = function(strokeNum, stroke) {
  mapIndexed(function(i,splinePoints) {
    pam(splinePoints,
        function(pt) {
          _.extend({strokeNum: strokeNum, substrokeNum: i},
                   {x: pt[0], y: pt[1]})
        })
  }, stroke)
}

var characterToDf = function(strokes) {
  _.flatten(mapIndexed(function(i, stroke) { strokeToDf(i, stroke) },
                       strokes))
}

var makeTrajectories = function(strokes) {
  var helper = function(i, trajectoriesSoFar) {
    if (i == strokes.length) {
      return trajectoriesSoFar
    }
    var stroke = strokes[i],
        r = stroke.relation;

    var start = ((r.type == 'independent')
                 ? [r.x, r.y]
                 : ((r.type == 'start')
                    ? _.first(_.first(trajectoriesSoFar[r.prevStrokeIndex]))
                    : ((r.type == 'end')
                       ? _.last(_.last(trajectoriesSoFar[r.prevStrokeIndex]))
                       // TODO: actually use the spline coordinate
                       : trajectoriesSoFar[r.prevStrokeIndex][r.prevSubStrokeIndex][4]
                      )))

    var trajectory = makeTrajectory(stroke, start[0], start[1]);

    return helper(i+1, trajectoriesSoFar.concat([trajectory]))
  }

  return helper(0, [])
}

//util.seedRNG(5)
var type = sampleType();
//var stroke = type[0];

//console.log(JSON.stringify(stroke,null,2))

var char = makeTrajectories(type);

JSON.stringify(characterToDf(char))
